.SUFFIXES: .lo .re .c

Q=
ifeq ($(V),)
	Q=@
endif

SEMVER_MAJOR=0
SEMVER_MINOR=0
SEMVER_PATCH=6
LIBMTEV_VERSION=$(SEMVER_MAJOR).$(SEMVER_MINOR).$(SEMVER_PATCH)

prefix=@prefix@
exec_prefix=@exec_prefix@
bindir=@bindir@
sbindir=@sbindir@
libdir=@libdir@
includedir=@includedir@
libexecdir=@libexecdir@
localstatedir=@localstatedir@
datarootdir=@datarootdir@
datadir=@datadir@
mandir=@mandir@
mansubdir=@mansubdir@
docdir=${prefix}/@docdir@
sysconfdir=@sysconfdir@
srcdir=@srcdir@
top_srcdir=@top_srcdir@
MODULES_DIR=@MODULES_DIR@

CC=@CC@
SHLD=@SHLD@
CPPFLAGS=-I$(top_srcdir)/src -I$(top_srcdir)/src/json-lib \
	-I$(top_srcdir)/src/utils @CPPFLAGS@
CFLAGS=@CFLAGS@ @CFLAGSEXTRAS@
SHCFLAGS=@SHCFLAGS@ @CFLAGSEXTRAS@
CLINKFLAGS=@CLINKFLAGS@
LUACFLAGS=@LUACFLAGS@
PGCFLAGS=@PGCFLAGS@
LDFLAGS=@LDFLAGS@ -L$(libdir)
RLDFLAG=@RLDFLAG@
ifneq ($(strip $(RLDFLAG)),)
  LDFLAGS += @RLDFLAG@$(libdir)
endif
SHLDFLAGS=@SHLDFLAGS@
LIBMTEV_LIBS=@LIBMTEV_LIBS@
LIBMTEVLL_LIBS=@LIBMTEVLL_LIBS@
DEPFLAGS=@DEPFLAGS@
MODULELD=@MODULELD@
AR=@AR@
RANLIB=@RANLIB@
LIBS=@LIBS@
INSTALL=@INSTALL@
XML2H=@top_srcdir@/buildtools/xml2h
MAPFLAGS=@MAPFLAGS@
CTFCONVERT=@CTFCONVERT@
CTFMERGE=@CTFMERGE@

# Later versions of ctfconvert no longer have -g and by default do not strip,
# so we get the same behavior as with -g on older versions.
ifneq ($(wildcard $(CTFCONVERT)),)
  HAS_G=$(shell $(CTFCONVERT) 2>&1 | grep -- -gis)
  ifneq ($(HAS_G),)
    CTFNOSTRIP=-g
  else
    CTFNOSTRIP=
  endif
endif

WHOLE_ARCHIVE=@WHOLE_ARCHIVE@
NOWHOLE_ARCHIVE=@NOWHOLE_ARCHIVE@

DTRACEOBJ=@DTRACEOBJ@
LIBMTEV_DTRACEOBJ=$(DTRACEOBJ:%dtrace_stub.o=libmtev_%dtrace_stub.lo)
LIBMTEV_V=libmtev@DOTSO@.$(LIBMTEV_VERSION)@DOTDYLIB@
LIBMTEV_MINOR=libmtev@DOTSO@.$(SEMVER_MAJOR).$(SEMVER_MINOR)@DOTDYLIB@
LIBMTEV=libmtev@DOTSO@@DOTDYLIB@

TARGETS=$(LIBMTEV) luamtev @MDB_MODS@

all:	reversion $(TARGETS) make-man build-modules

build-modules:
	(cd modules && $(MAKE))

HEADERS=mtev_capabilities_listener.h mtev_conf.h mtev_version.h \
	mtev_cluster.h mtev_net_heartbeat.h \
	mtev_config.h mtev_conf_private.h mtev_console.h mtev_console_telnet.h \
	mtev_defines.h mtev_events_rest.h \
	mtev_http.h mtev_listener.h \
	mtev_main.h mtev_dso.h mtev_reverse_socket.h mtev_rest.h \
	mtev_tokenizer.h mtev_xml.h \
	eventer/OETS_asn1_helper.h eventer/eventer.h \
	eventer/eventer_POSIX_fd_opset.h eventer/eventer_SSL_fd_opset.h \
	eventer/eventer_jobq.h \
	noitedit/chared.h noitedit/common.h noitedit/compat.h noitedit/el.h \
	noitedit/el_term.h noitedit/emacs.h noitedit/fcns.h noitedit/fgetln.h \
	noitedit/help.h noitedit/hist.h noitedit/histedit.h noitedit/key.h \
	noitedit/map.h noitedit/parse.h noitedit/prompt.h noitedit/refresh.h \
	noitedit/search.h noitedit/sig.h noitedit/strlcpy.h noitedit/sys.h \
	noitedit/tokenizer.h noitedit/tty.h noitedit/vi.h

MAPPEDHEADERS= \
	utils/mtev_atomic.h utils/mtev_b32.h utils/mtev_b64.h \
	utils/mtev_btrie.h utils/mtev_cht.h utils/mtev_confstr.h \
	utils/mtev_getip.h utils/mtev_hash.h utils/mtev_hooks.h \
	utils/mtev_lockfile.h utils/mtev_log.h utils/mtev_memory.h \
	utils/mtev_mkdir.h utils/mtev_security.h utils/mtev_sem.h \
	utils/mtev_skiplist.h utils/mtev_str.h utils/mtev_watchdog.h \
	utils/mtev_uuid_parse.h utils/mtev_zipkin.h \
	json-lib/mtev_arraylist.h json-lib/mtev_bits.h json-lib/mtev_debug.h \
	json-lib/mtev_json_object.h \
	json-lib/mtev_json_tokener.h json-lib/mtev_json_util.h json-lib/mtev_json.h \
	json-lib/mtev_linkhash.h json-lib/mtev_printbuf.h \
	modules/mtev_fq.h


JSON_LIB_OBJS=json-lib/mtev_arraylist.lo json-lib/mtev_debug.lo json-lib/mtev_json_object.lo \
        json-lib/mtev_json_tokener.lo json-lib/mtev_json_util.lo json-lib/mtev_linkhash.lo \
        json-lib/mtev_printbuf.lo
MTEVEDIT_LIB_OBJS=noitedit/chared.lo noitedit/common.lo noitedit/el.lo \
        noitedit/emacs.lo noitedit/fcns.lo noitedit/fgetln.lo noitedit/help.lo \
        noitedit/hist.lo noitedit/history.lo noitedit/key.lo noitedit/map.lo \
        noitedit/parse.lo noitedit/prompt.lo noitedit/read.lo noitedit/readline.lo \
        noitedit/refresh.lo noitedit/search.lo noitedit/sig.lo noitedit/strlcpy.lo \
        noitedit/term.lo noitedit/tokenizer.lo noitedit/tty.lo noitedit/vi.lo
EVENTER_OBJS=@EVENTER_OBJS@
EVENTER_IMPL_OBJS=$(EVENTER_OBJS:%.lo=eventer/%.lo)
ATOMIC_REL_OBJS=@ATOMIC_OBJS@
ATOMIC_OBJS=$(ATOMIC_REL_OBJS:%.lo=utils/%.lo)
EVENTER_LIB_OBJS=eventer/OETS_asn1_helper.lo eventer/eventer.lo \
        eventer/eventer_POSIX_fd_opset.lo eventer/eventer_SSL_fd_opset.lo \
        eventer/eventer_impl.lo eventer/eventer_jobq.lo $(EVENTER_IMPL_OBJS)
MTEV_UTILS_OBJS=utils/mtev_b32.lo utils/mtev_b64.lo utils/mtev_btrie.lo \
	utils/mtev_confstr.lo utils/mtev_getip.lo utils/mtev_hash.lo \
	utils/mtev_lockfile.lo utils/mtev_log.lo utils/mtev_mkdir.lo \
	utils/mtev_security.lo utils/mtev_sem.lo utils/mtev_skiplist.lo \
	utils/mtev_str.lo utils/mtev_watchdog.lo utils/mtev_zipkin.lo \
	utils/mtev_memory.lo utils/mtev_cht.lo utils/mtev_uuid_parse.lo \
        $(ATOMIC_OBJS)

LIBMTEV_OBJS=mtev_main.lo mtev_listener.lo mtev_cluster.lo \
	mtev_console.lo mtev_console_state.lo mtev_console_telnet.lo \
	mtev_console_complete.lo mtev_xml.lo \
	mtev_conf.lo mtev_http.lo mtev_rest.lo mtev_tokenizer.lo \
	mtev_reverse_socket.lo \
	mtev_capabilities_listener.lo mtev_dso.lo \
	mtev_events_rest.lo mtev_net_heartbeat.lo \
	$(MTEVEDIT_LIB_OBJS) $(EVENTER_LIB_OBJS) \
	$(MTEV_UTILS_OBJS) $(JSON_LIB_OBJS)

FINAL_LIBMTEV_OBJS=$(LIBMTEV_OBJS:%.lo=libmtev-objs/%.lo)

libmtev-objs/%.lo:	%.lo
	$(Q)mkdir -p "`dirname $@`"
	@echo "- making private $@"
	$(Q)cp $(@:libmtev-objs/%.lo=%.lo) $@.noctf
	$(Q)if test -x "$(CTFCONVERT)" ; then \
		echo "- making CTF ($@)" ; \
		$(CTFCONVERT) $(CTFNOSTRIP) -i -l @VERSION@ $@.noctf ; \
	fi
	$(Q)mv $@.noctf $@

make-man:
	$(Q)(cd man && $(MAKE) -s)

.PHONY:	reversion

reversion:
	$(Q)$(top_srcdir)/buildtools/mkversion.sh mtev_version.h

mtev_version.h:
	$(Q)$(top_srcdir)/buildtools/mkversion.sh mtev_version.h

$(LIBMTEV):	$(LIBMTEV_V)
	$(Q)ln -sf $(LIBMTEV_V) $(LIBMTEV)

$(LIBMTEV_V):	$(FINAL_LIBMTEV_OBJS) $(LIBMTEV_DTRACEOBJ)
	@echo "- linking $@"
	$(Q)$(SHLD) $(SHLDFLAGS) -o $@ @LD_LIBMTEV_VERSION@ $(FINAL_LIBMTEV_OBJS) $(LIBMTEV_DTRACEOBJ) $(LIBMTEV_LIBS)
	$(Q)if test -x "$(CTFMERGE)" ; then \
		echo "- merging CTF ($@)" ; \
		$(CTFMERGE) -l @VERSION@ -o $@ $(FINAL_LIBMTEV_OBJS) $(LIBMTEV_DTRACEOBJ) ; \
	fi

$(LIBMTEV_DTRACEOBJ):    $(FINAL_LIBMTEV_OBJS)
	@echo "- assembling $@"
	$(Q)@DTRACE@ @DTRACEFLAGS@ -Z -G -s libmtev_dtrace_probes.d -o $(LIBMTEV_DTRACEOBJ) $(FINAL_LIBMTEV_OBJS)

@DTRACEHDR@:    libmtev_dtrace_probes.d
	$(Q)if test -z "@DTRACE@" ; then \
		echo "- faking dtrace header" ; \
		cp ./@DTRACEHDR@.stock ./@DTRACEHDR@ ; \
	else \
		echo "- building dtrace header $@" ; \
		@DTRACE@ -h -s libmtev_dtrace_probes.d ; \
	fi

mdb-support/mdb_help.lo:	mdb-support/mdb_help.c
	@echo "- compiling $@"
	$(Q)$(CC) -Imdb-support $(CPPFLAGS) $(SHCFLAGS) $(CFLAGS) -o $@ -c $<

SHAREDMDBMODSRC=mdb-support/mtevutils.c mdb-support/eventer.c

mdb-support/libmtev.lo:	mdb-support/libmtev.c $(SHAREDMDBMODSRC)
	@echo "- compiling $@"
	$(Q)$(CC) -Imdb-support $(CPPFLAGS) $(SHCFLAGS) $(CFLAGS) -o $@ -c $<

mdb-support/libmtev.so:	mdb-support/libmtev.lo mdb-support/mdb_help.lo
	@echo "- linking $@"
	$(Q)$(MODULELD) $(SHLDFLAGS) -o $@ mdb-support/libmtev.lo mdb-support/mdb_help.lo

.c.lo:
	$(Q)if [ "`dirname $@`" != "." ] ; then \
		(cd "`dirname $@`" && $(MAKE) "`basename $@`") ; \
	else \
		echo "- compiling $<" ; \
	  $(CC) $(CPPFLAGS) $(SHCFLAGS) -c $< -o $@ ; \
	fi

.c.o:
	$(Q)if [ "`dirname $@`" != "." ] ; then \
		(cd "`dirname $@`" && $(MAKE) "`basename $@`") ; \
	else \
		echo "- compiling $<" ; \
		$(CC) $(CPPFLAGS) $(CFLAGS) -c $< ; \
	fi

utils/mtev_atomic_sol_sparcv8plus.o:	utils/mtev_atomic_sol.s
	$(Q)(cd utils && $(MAKE) mtev_atomic_sol_sparcv8plus.o)

utils/mtev_atomic_sol_sparcv9.o:	utils/mtev_atomic_sol.s
	$(Q)(cd utils && $(MAKE) mtev_atomic_sol_sparcv9.o)

utils/mtev_atomic_sol_x86_32.o:	utils/mtev_atomic_sol.s
	$(Q)(cd utils && $(MAKE) mtev_atomic_sol_x86_32.o)

utils/mtev_atomic_sol_x86_64.o:	utils/mtev_atomic_sol.s
	$(Q)(cd utils && $(MAKE) mtev_atomic_sol_x86_64.o)

mtev_tokenizer.c:
	@echo "- re2c mtev_tokenizer.re"
	$(Q)re2c -o $@ mtev_tokenizer.re

install-headers:	$(HEADERS) $(MAPPEDHEADERS)
	$(top_srcdir)/buildtools/mkinstalldirs $(DESTDIR)$(bindir)
	$(top_srcdir)/buildtools/mkinstalldirs $(DESTDIR)$(includedir)
	$(top_srcdir)/buildtools/mkinstalldirs $(DESTDIR)$(includedir)/eventer
	$(top_srcdir)/buildtools/mkinstalldirs $(DESTDIR)$(includedir)/noitedit
	$(INSTALL) -m 0755 ../buildtools/xml2h $(DESTDIR)$(bindir)/mtev-xml2h
	$(INSTALL) -m 0755 scripts/mtev-config $(DESTDIR)$(bindir)/mtev-config
	for file in $(HEADERS) ; do \
		$(INSTALL) -m 0644 $$file $(DESTDIR)$(includedir)/$$file ; \
	done
	for file in $(MAPPEDHEADERS) ; do \
		$(INSTALL) -m 0644 $$file $(DESTDIR)$(includedir)/` echo $$file | sed -e 's/^[^\/]*\///'` ; \
	done

mtevlibs:	$(LIBMTEV_V) @MDB_MODS@

luamtev.o:      luamtev.c luamtev.conf.tmpl

luamtev:        luamtev.o
	$(Q)echo "- linking $@"
	$(Q)$(CC) -L. $(LDFLAGS) -o $@ luamtev.o -lmtev @LUALIBS@

install-bins:	luamtev
	$(top_srcdir)/buildtools/mkinstalldirs $(DESTDIR)$(bindir)
	$(INSTALL) -m 0755 luamtev $(DESTDIR)$(bindir)/luamtev
	
install-libs:	mtevlibs
	$(top_srcdir)/buildtools/mkinstalldirs $(DESTDIR)$(libdir)
	$(INSTALL) -m 0755 $(LIBMTEV_V) $(DESTDIR)$(libdir)/$(LIBMTEV_V)
	ln -sf $(LIBMTEV_V) $(DESTDIR)$(libdir)/$(LIBMTEV)
	ln -sf $(LIBMTEV_V) $(DESTDIR)$(libdir)/$(LIBMTEV_MINOR)
	if test -n "@MDB_MODS@" ; then \
		$(top_srcdir)/buildtools/mkinstalldirs $(DESTDIR)/usr/lib/mdb/proc/amd64 ; \
		$(INSTALL) -m 0755 mdb-support/libmtev.so $(DESTDIR)/usr/lib/mdb/proc/amd64/libmtev.so ; \
	fi

install-modules:
	(cd modules && $(MAKE) install DESTDIR=$(DESTDIR))

install-docs:
	(cd man && $(MAKE) install DESTDIR=$(DESTDIR))

install:	install-bins install-docs install-headers install-libs install-modules

clean:
	rm -f *.lo *.o libmtev_dtrace_probes.h
	rm -f $(LIBMTEV) $(LIBMTEV_V)
	rm -rf libmtev-objs
	rm -rf mdb-support/*.lo mdb-support/*.so
	(cd eventer && $(MAKE) clean)
	(cd man && $(MAKE) clean)
	(cd modules && $(MAKE) clean)
	(cd noitedit && $(MAKE) clean)
	(cd utils && $(MAKE) clean)
	(cd json-lib && $(MAKE) clean)

Makefile.dep:
	$(CC) -I. $(CPPFLAGS) $(CFLAGS) $(DEPFLAGS) *.c > Makefile.dep
	for d in utils udns eventer noitedit json-lib ; do \
		$(CC) -I. $(CPPFLAGS) $(CFLAGS) $(DEPFLAGS) $$d/*.c | \
		perl -pe 's#(\s)([^\s\\])#$$1$$2#g; s#^(\S)#'$$d'/$$1#;' >> \
		Makefile.dep ; \
	done
	for impl in kqueue ports epoll; do \
		echo "libmtev-objs/eventer/eventer_$${impl}_impl.o: eventer/eventer_$${impl}_impl.o" >> $@ ; \
		echo "libmtev-objs/eventer/eventer_$${impl}_impl.lo: eventer/eventer_$${impl}_impl.lo" >> $@ ; \
	done
	$(top_srcdir)/buildtools/culldeps.sh Makefile.dep

include Makefile.dep

distclean-subdirs:
	for dir in eventer man modules noitedit utils json-lib ; do \
		(cd $$dir && $(MAKE) distclean) ; \
	done

distclean:	clean distclean-subdirs
	rm -f Makefile mtev_config.h scripts/mtev-config
