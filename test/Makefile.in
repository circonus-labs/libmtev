.NOTPARALLEL:

Q=
ifeq ($(V),)
	Q=@
endif

CC=@CC@
CPPFLAGS=@CPPFLAGS@ -DHIDE_EVENTER_ABI -I../src/utils -I../src -I../src/json-lib
CFLAGS=@CFLAGS@
LDFLAGS=@LDFLAGS@
AR=@AR@
RANLIB=@RANLIB@
LIBS=@LIBS@
PGLIBS=@PGLIBS@
INSTALL=@INSTALL@
MODULES_DIR=@MODULES_DIR@
LIBMTEV_LIBS=@LIBMTEV_LIBS@
UNWINDLIB=@UNWINDLIB@
VALIDATECERT=openssl x509 -noout -checkend 300 -in
CERTS=demoCA/root/certs/ca.crt demoCA/intermediate/certs/ca.crt \
      test-server.crt test-client.crt

prefix=@prefix@
exec_prefix=@exec_prefix@
bindir=@bindir@
sbindir=@sbindir@
libdir=@libdir@
includedir=@includedir@
libexecdir=@libexecdir@
datarootdir = @datarootdir@
mandir=@mandir@
mansubdir=@mansubdir@
docdir=${prefix}/@docdir@
sysconfdir=@sysconfdir@
srcdir=@srcdir@
top_srcdir=@top_srcdir@

LD_LIBRARY_PATH=`pwd`/../src
TESTHARNESS_OBJS=test_harness.o
LUAROCKS=@LUAROCKS@
LUAROCKS_PATH=@LUAROCKS_PATH@
LUA_FILES=mtevbusted/init.lua mtevbusted/cli.lua mtevbusted/api.lua mtevbusted/child.lua

all:	geturllz4f check

TESTS=smr_test intern_test frrh_test uuid_test time_test hll_test maybe_alloc_test dyn_buffer_test speculatelog_test lru_test lfu_test pool-shift-async/test flowreg/test async-pingpong/test subqueues/test luamtev-test/test

geturllz4f:	geturllz4f.c
	$(Q)$(CC) $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o $@ $< -lmtev $(LIBMTEV_LIBS) -lcurl

luamtev-test/test:
	touch $@

async-pingpong/test:	async-pingpong/test.c
	$(Q)$(CC) $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o $@ $< -lmtev $(LIBMTEV_LIBS)


pool-shift-async/test:	pool-shift-async/test.c
	$(Q)$(CC) $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o $@ $< -lmtev $(LIBMTEV_LIBS)

flowreg/test:	flowreg/test.c
	$(Q)$(CC) $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o $@ $< -lmtev $(LIBMTEV_LIBS)

subqueues/test:	subqueues/test.c
	$(Q)$(CC) $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o $@ $< -lmtev $(LIBMTEV_LIBS)

smr_test: smr_test.c
	$(Q)$(CC) $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o $@ $< -lmtev $(LIBMTEV_LIBS)

intern_test: intern_test.c
	$(Q)$(CC) $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o $@ $< -lmtev $(LIBMTEV_LIBS)

frrh_test: frrh_test.c
	$(Q)$(CC) $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o $@ $< -lmtev $(LIBMTEV_LIBS)

hash_test: hash_test.c
	$(Q)$(CC) $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o $@ $< -lmtev $(LIBMTEV_LIBS)

huge_hash_test: huge_hash_test.c
	$(Q)$(CC) $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o $@ $< -lmtev $(LIBMTEV_LIBS)

uuid_test: uuid_test.c
	$(Q)$(CC) $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o $@ $< -lmtev $(LIBMTEV_LIBS) -luuid

time_test: time_test.c
	$(Q)$(CC) $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o $@ $< -lmtev $(LIBMTEV_LIBS)

sort_test: sort_test.c
	$(Q)$(CC) $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o $@ $< -lmtev $(LIBMTEV_LIBS)

hll_test: hll_test.c
	$(Q)$(CC) $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o $@ $< -lmtev $(LIBMTEV_LIBS)

maybe_alloc_test: maybe_alloc_test.c
	$(Q)$(CC) $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o $@ $< -lmtev $(LIBMTEV_LIBS)

dyn_buffer_test: dyn_buffer_test.c
	$(Q)$(CC) $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o $@ $< -lmtev $(LIBMTEV_LIBS)

speculatelog_test: speculatelog_test.c
	$(Q)$(CC) $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o $@ $? -lmtev $(LIBMTEV_LIBS)

lru_test: lru_test.c
	$(Q)$(CC) $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o lru_test lru_test.c -lmtev $(LIBMTEV_LIBS)

lfu_test: lfu_test.c
	$(Q)$(CC) $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o lfu_test lfu_test.c -lmtev $(LIBMTEV_LIBS)

.c.o:
	@echo "- compiling $<"
	$(Q)$(CC) $(CPPFLAGS) $(CFLAGS) -c $<

test_http_server: test_http_server.c
	$(Q)$(CC) $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o $@ $< -lmtev $(LIBMTEV_LIBS)

test_harness:       $(TESTHARNESS_OBJS)
	@echo "- linking $@"
	$(Q)$(CC) -L../src $(LDFLAGS) $(UNWINDLIB) -o $@ $(TESTHARNESS_OBJS) $(LIBS) -lmtev

check-lua: test_http_server geturllz4f testcerts
	@echo
	@echo "Running luajit-based tests via test_harness..."
	$(Q)_DYLD_LIBRARY_PATH=$(LD_LIBRARY_PATH) DYLD_LIBRARY_PATH=$(LD_LIBRARY_PATH) LD_LIBRARY_PATH=$(LD_LIBRARY_PATH) _LD_PRELOAD=`pwd`/../src/libmtev@DOTSO@ LUA_PATH="$(LUAROCKS_PATH)" ./mtevbusted-wrapper.sh

check-standalone: $(TESTS)
	@echo
	@echo "Running other tests via script..."
	$(Q)_DYLD_LIBRARY_PATH=$(LD_LIBRARY_PATH) DYLD_LIBRARY_PATH=$(LD_LIBRARY_PATH) LD_LIBRARY_PATH=$(LD_LIBRARY_PATH) _LD_PRELOAD=`pwd`/../src/libmtev@DOTSO@ ./run_standalone_tests.sh $(TESTS)

install:	mtevbusted-script
	$(top_srcdir)/buildtools/mkinstalldirs $(DESTDIR)$(bindir)
	$(INSTALL) -m 0755 mtevbusted-script $(DESTDIR)$(bindir)/mtevbusted
	$(top_srcdir)/buildtools/mkinstalldirs $(DESTDIR)$(MODULES_DIR)/lua/mtevbusted
	for lua in $(LUA_FILES); do \
		$(INSTALL) -m 0755 $$lua $(DESTDIR)$(MODULES_DIR)/lua/$$lua ; \
	done

check:	check-standalone check-lua

demoCA/root/anchor:
	@bash -c "mkdir -p demoCA/root/{private,certs,csr,crl,newcerts}"
	@touch demoCA/root/index.txt
	@test -f demoCA/root/serial || echo 00 > demoCA/root/serial
	@touch demoCA/root/anchor

demoCA/intermediate/anchor:
	@bash -c "mkdir -p demoCA/intermediate/{private,certs,csr,crl,newcerts}"
	@touch demoCA/intermediate/index.txt
	@test -f demoCA/intermediate/serial || echo 00 > demoCA/intermediate/serial
	@touch demoCA/intermediate/anchor


testcerts:	validatecerts $(CERTS)

.PHONY: validatecerts
validatecerts:
	$(Q)for crt in $(CERTS); do \
	  if [ ! -f $$crt ]; then \
	    rm -rf demoCA/root demoCA/intermediate ; \
	    break ; \
	  fi ; \
	  $(VALIDATECERT) $$crt 2>&1 > /dev/null || \
	  (echo -n "$$crt: "; $(VALIDATECERT) $$crt ; \
	   rm -rf demoCA/root demoCA/intermediate ; \
	   break) ; \
	done

demoCA/root/private/ca.key:	demoCA/root/anchor
	@echo " - $@"
	$(Q)openssl genrsa -out $@ 4096

demoCA/root/csr/ca.csr:    demoCA/root/private/ca.key
	@echo " - $@"
	$(Q)openssl req -sha256 -key demoCA/root/private/ca.key -new -out $@ -config demoCA/root.cnf -extensions v3_ca -subj "/C=US/ST=Maryland/O=Circonus Labs/CN=Sample Root CA"

demoCA/root/certs/ca.crt:    demoCA/root/csr/ca.csr demoCA/root/private/ca.key
	@echo " - $@"
	$(Q)openssl x509 -sha256 -req -in demoCA/root/csr/ca.csr -signkey demoCA/root/private/ca.key -out $@ -extfile demoCA/root.cnf -extensions v3_ca -days 365
	$(Q)rm -rf demoCA/intermediate
	$(Q)rm -f test-{client,server}.crt

demoCA/intermediate/private/ca.key:	demoCA/intermediate/anchor
	@echo " - $@"
	$(Q)openssl genrsa -out $@ 4096

demoCA/intermediate/csr/ca.csr:    demoCA/intermediate/private/ca.key
	@echo " - $@"
	$(Q)openssl req -sha256 -key demoCA/intermediate/private/ca.key -new -out $@ -config demoCA/intermediate.cnf -extensions v3_intermediate_ca -subj "/C=US/ST=Maryland/O=Circonus Labs/CN=Sample Intermediate CA"

demoCA/intermediate/certs/ca.crt:    demoCA/root/certs/ca.crt demoCA/intermediate/csr/ca.csr
	@echo " - $@"
	$(Q)openssl ca -batch -config demoCA/root.cnf -in demoCA/intermediate/csr/ca.csr -out $@ -keyfile demoCA/root/private/ca.key -cert demoCA/root/certs/ca.crt -extensions v3_intermediate_ca -days 120

test-server.key:
	@echo " - $@"
	$(Q)openssl genrsa -out $@ 2048

demoCA/intermediate/csr/test-server.csr:  test-server.key
	@echo " - $@"
	$(Q)openssl req -sha256 -key test-server.key -days 365 -new -out $@ -config demoCA/intermediate.cnf -subj "/C=US/ST=Maryland/O=Circonus Labs/CN=test-server"

test-server-standalone.crt:  demoCA/intermediate/csr/test-server.csr demoCA/intermediate/certs/ca.crt
	@echo " - $@"
	$(Q)openssl ca -batch -config demoCA/intermediate.cnf -in demoCA/intermediate/csr/test-server.csr -out $@ -days 120 -keyfile demoCA/intermediate/private/ca.key

test-server.crt:	test-server-standalone.crt demoCA/intermediate/certs/ca.crt
	@echo " - $@"
	$(Q)cat test-server-standalone.crt demoCA/intermediate/certs/ca.crt > $@

test-client.key:
	@echo " - $@"
	$(Q)openssl genrsa -out $@ 2048

demoCA/root/csr/test-client.csr:	test-client.key demoCA/root/private/ca.key
	$(Q)openssl req -sha256 -key test-client.key -new -out $@ -config demoCA/root.cnf -subj "/C=US/ST=Maryland/O=Circonus Labs/CN=test-client"

test-client.crt:	demoCA/root/csr/test-client.csr demoCA/root/private/ca.key
	@echo " - $@"
	$(Q)openssl ca -batch -config demoCA/root.cnf -in demoCA/root/csr/test-client.csr -out $@ -days 120 -keyfile demoCA/root/private/ca.key

	
clean:
	rm -f $(TESTS) geturllz4f
	rm -rf demoCA/root demoCA/intermediate
	rm -f *.key *.crt *.csr *.pem
