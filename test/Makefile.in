.NOTPARALLEL:

Q=
ifeq ($(V),)
	Q=@
endif

CC=@CC@
CPPFLAGS=@CPPFLAGS@ -DHIDE_EVENTER_ABI
CFLAGS=@CFLAGS@
LDFLAGS=@LDFLAGS@
AR=@AR@
RANLIB=@RANLIB@
LIBS=@LIBS@
PGLIBS=@PGLIBS@
INSTALL=@INSTALL@
MODULES_DIR=@MODULES_DIR@
LIBMTEV_LIBS=@LIBMTEV_LIBS@
UNWINDLIB=@UNWINDLIB@

prefix=@prefix@
exec_prefix=@exec_prefix@
bindir=@bindir@
sbindir=@sbindir@
libdir=@libdir@
includedir=@includedir@
libexecdir=@libexecdir@
datarootdir = @datarootdir@
mandir=@mandir@
mansubdir=@mansubdir@
docdir=${prefix}/@docdir@
sysconfdir=@sysconfdir@
srcdir=@srcdir@
top_srcdir=@top_srcdir@

LD_LIBRARY_PATH=../src
TESTHARNESS_OBJS=test_harness.o
LUAROCKS=@LUAROCKS@
LUAROCKS_PATH=@LUAROCKS_PATH@
LUA_FILES=mtevbusted/init.lua mtevbusted/cli.lua mtevbusted/api.lua mtevbusted/child.lua

all:	check

TESTS=hash_test uuid_test time_test hll_test maybe_alloc_test dyn_buffer_test speculatelog_test lru_test pool-shift-async/test flowreg/test

pool-shift-async/test:	pool-shift-async/test.c
	$(Q)$(CC) -I../src/utils $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o $@ $< -lmtev $(LIBMTEV_LIBS)

flowreg/test:	flowreg/test.c
	$(Q)$(CC) -I../src/utils $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o $@ $< -lmtev $(LIBMTEV_LIBS)

hash_test: hash_test.c
	$(Q)$(CC) -I../src/utils $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o hash_test hash_test.c -lmtev $(LIBMTEV_LIBS)

uuid_test: uuid_test.c
	$(Q)$(CC) -I../src/utils $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o uuid_test uuid_test.c -lmtev $(LIBMTEV_LIBS)

time_test: time_test.c
	$(Q)$(CC) -I../src/utils $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o time_test time_test.c -lmtev $(LIBMTEV_LIBS)

sort_test: sort_test.c
	$(Q)$(CC) -I../src/utils $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o sort_test sort_test.c -lmtev $(LIBMTEV_LIBS)

hll_test: hll_test.c
	$(Q)$(CC) -I../src/utils $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o hll_test hll_test.c -lmtev $(LIBMTEV_LIBS)

maybe_alloc_test: maybe_alloc_test.c
	$(Q)$(CC) -I../src/utils $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o maybe_alloc_test maybe_alloc_test.c -lmtev $(LIBMTEV_LIBS)

dyn_buffer_test: dyn_buffer_test.c
	$(Q)$(CC) -I../src/utils $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o dyn_buffer_test dyn_buffer_test.c -lmtev $(LIBMTEV_LIBS)

speculatelog_test: speculatelog_test.c
	$(Q)$(CC) -I../src/utils -I../src -I../src/json-lib $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o $@ $? -lmtev $(LIBMTEV_LIBS)

lru_test: lru_test.c
	$(Q)$(CC) -I../src/utils $(CPPFLAGS) $(CFLAGS) -L../src $(LDFLAGS) -o lru_test lru_test.c -lmtev $(LIBMTEV_LIBS)

.c.o:
	@echo "- compiling $<"
	$(Q)$(CC) -I../src/utils $(CPPFLAGS) $(CFLAGS) -c $<

test_harness:       $(TESTHARNESS_OBJS)
	@echo "- linking $@"
	$(Q)$(CC) -L../src $(LDFLAGS) $(UNWINDLIB) -o $@ $(TESTHARNESS_OBJS) $(LIBS) -lmtev

check-lua:
	@echo
	@echo "Running luajit-based tests via test_harness..."
	$(Q)_DYLD_LIBRARY_PATH=$(LD_LIBRARY_PATH) DYLD_LIBRARY_PATH=$(LD_LIBRARY_PATH) LD_LIBRARY_PATH=$(LD_LIBRARY_PATH) LUA_PATH="$(LUAROCKS_PATH)" ./mtevbusted-wrapper.sh

check-standalone: $(TESTS)
	@echo
	@echo "Running other tests via script..."
	$(Q)_DYLD_LIBRARY_PATH=$(LD_LIBRARY_PATH) DYLD_LIBRARY_PATH=$(LD_LIBRARY_PATH) LD_LIBRARY_PATH=$(LD_LIBRARY_PATH) ./run_standalone_tests.sh $(TESTS)

install:	mtevbusted-script
	$(top_srcdir)/buildtools/mkinstalldirs $(DESTDIR)$(bindir)
	$(INSTALL) -m 0755 mtevbusted-script $(DESTDIR)$(bindir)/mtevbusted
	$(top_srcdir)/buildtools/mkinstalldirs $(DESTDIR)$(MODULES_DIR)/lua/mtevbusted
	for lua in $(LUA_FILES); do \
		$(INSTALL) -m 0755 $$lua $(DESTDIR)$(MODULES_DIR)/lua/$$lua ; \
	done

check:	check-standalone check-lua

clean:
	rm -f $(TESTS)
