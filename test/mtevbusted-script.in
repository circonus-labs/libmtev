#!@bindir@/luamtev -L+@LUAROCKS_PATH@

TEST_OPTIONS = {}

module(..., package.seeall)

require('mtevbusted/init')

local tags, exclude_tags
local helpers = {}
local add_tag = function(tag)
  if tags == nil then tags = {} end
  tags[#tags+1] = tag
end
local add_exclude_tag = function(tag)
  if exclude_tags == nil then exclude_tags = {} end
  exclude_tags[#exclude_tags+1] = tag
end
local add_helper = function(file)
  helpers[#helpers + 1] = file
end
local set_option = function(kv)
  local k, v = kv:match("^([^=]+)=(.*)$")
  if k ~= nil then TEST_OPTIONS[k]=v else TEST_OPTIONS[kv] = true end
end
local disable_log = function(outlet)
  mtev.enable_log(outlet, false)
end

cli_option("X", { help = "Options K(=V)?", value = set_option })
cli_option("h", { help = "usage", value = false, default = false })
cli_option("i", { help = "initial helper", value = add_helper })
cli_option("file", { help = "test file", value = ".", default = "." })
cli_option("tag", { help = "include tag <arg>", value = add_tag })
cli_option("exclude-tag", { help = "exclude tag <arg>", value = add_exclude_tag })
cli_option("filter", { help = "only run test names matching the Lua pattern", default = nil })
cli_option("filter-out", { help = "do not run test names matching the Lua pattern, takes precedence over --filter", default = nil })
cli_option("list", { help = "list all available tests", value = false, default = false })
cli_option("bail", { help = "stop at end of test after first failure", value = false, default = false })
cli_option("l",  { help = "enable mtev log stream", value = mtev.enable_log })
cli_option("L",  { help = "disable mtev log stream", value = disable_log })
cli_option("skip", { help = "skip all subtests after error or failure", value = false, default = false })
local options = parsecli()
if options.h.value then usage() end

local _G = _G
local __buf = ''
local io = io
local os = require('os')
local print = print
local pairs = pairs
local filename = os.getenv('JUNIT_OUTPUT_FILE') or 'test_detail.xml'
local previowrite = io.write
local mteviowrite = function(s)
  mtev.log("stdout", "%s", s)
end

local mtev = mtev
local nthreads = mtev.eventer_loop_concurrency()
local require = require
local pcall = pcall

if (os.getenv("LUA_PATH") ~= nil) then
  package.path = package.path .. ";" .. os.getenv("LUA_PATH")
end

local l = require("luarocks.loader")
l.add_context("busted", "2.0.rc12-1")

local busted = require('busted.core')();
local filterLoader = require 'busted.modules.filter_loader'()
local helperLoader = require 'busted.modules.helper_loader'()
local outputHandlerLoader = require 'busted.modules.output_handler_loader'()
local luacov = require 'busted.modules.luacov'()

require 'busted'(busted)

-- Load tag and test filters
filterLoader(busted, {
  tags = tags,
  excludeTags = exclude_tags,
  filter = { options.filter.value },
  filterOut = { options['filter-out'].value },
  list = options.list.value,
  nokeepgoing = options["bail"],
})

outputHandlerLoader(
  busted, 'junit',
  { arguments = { filename }, language = 'en', verbose = true }
)
outputHandlerLoader(
  busted, 'gtest',
  { language = 'en', verbose = true }
)

if mtev.stat("lua-support/init.lua") ~= nil then
  helperLoader(busted, 'lua-support/init.lua', { verbose = true, language = 'lua' })
end

for i, file in ipairs(helpers) do
  helperLoader(busted, file, { verbose = true, language = 'lua' })
end

local testFileLoader = require 'busted.modules.test_file_loader'(busted, { 'lua', 'moonscript' })
testFileLoader({ options.file.value }, { '_spec' }, { recursive = true, excludes = {} })

busted.register('setup', 'lazy_setup')
busted.register('teardown', 'lazy_teardown')
busted.randomize = false

local function jobwatch()
  local todo = { }
  local fail = 0
  while true do
    local id, job, status, bad = mtev.waitfor('jobs', 1)
    if status == 'start' then
      todo[job] = 1
      fail = fail + bad
    end
    local cnt = 0
    for k,v in pairs(todo) do cnt = cnt + 1 end
    if cnt == 0 then
      mtev.log("test", "Jobs complete, failures: %d\n", fail)
      os.exit( fail == 0 and 0 or 2 )
    end
    if status == 'end' then
      todo[job] = nil
       fail = fail + bad
    end
  end
end

local tid, id = mtev.thread_self()
if id == 0 then
  mtev.coroutine_spawn(jobwatch)
end

function testsuite(context)
  local thread, tid = mtev.thread_self()
  local name = "testsuite-tid-" .. tid
  mtev.notify('jobs', name, 'start', 0)
  local failures = 0
  local errors = 0

  busted.subscribe({ 'error', 'it' }, function(...)
    errors = errors + 1
    return nil, true
  end)

  busted.subscribe({ 'failure', 'it' }, function(...)
    failures = failures + 1
    return nil, true
  end)

  busted.subscribe({ 'error' }, function(...)
    errors = errors + 1
    busted.skipAll = options["skip"].value
    return nil, true
  end)

  busted.subscribe({ 'failure' }, function(...)
    failures = failures + 1
    busted.skipAll = options["skip"].value
    return nil, true
  end)

  busted.subscribe({ 'suite', 'end' }, function (root, i, runs)
    local exit = 0
    if failures > 0 or errors > 0 then
      exit = 1
    end
    if context == "MAIN" then
      mtev.log("test", "%s testsuite finished\n", context)
    else
      mtev.log("test", "%s testsuite [%d/%d] finished\n", context, tid+1, nthreads)
    end
  end)

  busted.subscribe({ 'exit' }, function(...)
    mtev.notify('jobs', name, 'end', failures + errors)
  end)

  local execute = require 'busted.execute'(busted)
  execute(1, {
    seed = mtev.gettimeofday(),
    shuffle = true,
    sort = true,
  })
  busted.publish({ 'exit' })
end

function main()
  testsuite("MAIN")
end
