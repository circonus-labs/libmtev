AC_INIT(src/mtev_main.c)

node=`hostname | cut -f1 -d '.' | tr '[A-Z]' '[a-z]'`
if test -f ".configure.$node"; then
	echo "***********************************************************"
	echo "* Loading node specific configure settings for $node."
	echo "***********************************************************"
	. ./.configure.$node
fi

AC_CANONICAL_HOST
AC_CONFIG_HEADER(src/mtev_config.h)

AC_ARG_ENABLE(strict,
	[AC_HELP_STRING([--enable-strict],
		[Compile with warnings treated as errors])],
	enable_strict="$enableval",
	enable_strict=no)

AC_ARG_ENABLE(lua,
  [AC_HELP_STRING([--enable-lua],
    [Choose a lua implementation: (no, lua52, LuaJIT)])],
  ENABLE_LUA="$enableval",
  ENABLE_LUA=LuaJIT)

if (test "$ENABLE_LUA" != "LuaJIT" && \
  test "$ENABLE_LUA" != "lua52" && \
  test "$ENABLE_LUA" != "no") ; then
  AC_MSG_ERROR([Invalid value '$ENABLE_LUA' for --enable-lua])
fi

AC_PROG_CC
AC_C_INLINE
AC_C_BIGENDIAN
AC_PROG_CPP
AC_PROG_RANLIB
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PATH_PROG(AR, ar)
AC_PATH_PROGS(PERL, perl)
AC_PATH_PROGS(XSLTPROC, xsltproc)
AC_PATH_PROGS(XMLLINT, xmllint)
AC_PATH_PROG(NROFF, nroff)
AC_PATH_PROG(CTFCONVERT, ctfconvert)
AC_PATH_PROG(CTFMERGE, ctfmerge)
AC_PATH_PROG(LUA, luajit)
if test -z "$ac_cv_path_LUA"; then
  AC_PATH_PROG(LUA, lua)
fi
AC_SUBST(PERL)

if test "x$GCC" = "xyes" ; then
	C99FLAG="-std=c99"
	CFLAGS="$CFLAGS -g $C99FLAG"
	DEPFLAGS="-MM"
else
	C99FLAG="-xc99=all"
	CFLAGS="$CFLAGS -g $C99FLAG"
	DEPFLAGS="-xM1"
fi
SHLDFLAGS="$LDFLAGS"

CPPFLAGS="$CPPFLAGS -D_REENTRANT -D_XOPEN_SOURCE=600 -D_POSIX_SOURCE -D_POSIX_C_SOURCE=200112L "'-I$(top_srcdir)/src'
DTRACEHDR=libmtev_dtrace_probes.h
DOTSO=.so
LD_LIBMTEV_VERSION='-Wl,-soname,libmtev.so.$(LIBMTEV_VERSION)'

case $host in
*-*-darwin*)
	CAP_PLATFORM="darwin"
	DOTSO=
	DOTDYLIB=dylib
	DTRACE=/usr/sbin/dtrace
	DTRACE_ENABLED=1
	PICFLAGS="-fPIC"
	CPPFLAGS="$CPPFLAGS -D_DARWIN_C_SOURCE -DMAC_OS_X_VERSION_MIN_REQUIRED=MAC_OS_X_VERSION_10_6 -Wno-deprecated-declarations"
	MODULELD="$CC -bundle -flat_namespace -undefined suppress"
	SHLD="$CC -dynamiclib -single_module -undefined dynamic_lookup -fPIC"
  DOTDYLIB=.dylib
	LD_LIBMTEV_VERSION='-current_version $(LIBMTEV_VERSION) -install_name $(libdir)/libmtev.$(LIBMTEV_VERSION).dylib'
	MODULEEXT=bundle
	# This is needed for luajit on Mac OS X
	if test "x$ENABLE_LUA" = "xLuaJIT"; then
		LDFLAGS="$LDFLAGS -pagezero_size 10000 -image_base 100000000"
		SHLDFLAGS="$SHLDFLAGS -image_base 100000000"
	fi
	;;
*-*-solaris*)
	CAP_PLATFORM="illumos"
	CAP_SUPPORTED=1
	DTRACE=/usr/sbin/dtrace
	DTRACE_ENABLED=1
	DTRACEOBJ=dtrace_stub.o
	CFLAGS="$CFLAGS"
	CPPFLAGS="$CPPFLAGS -D__EXTENSIONS__"
	MDB_MODS="mdb-support/libmtev.so"
	if test "x$GCC" != "xyes" ; then
	AC_MSG_CHECKING([32 or 64 bit Solaris assembly])
	if test -n "`echo $CFLAGS | grep m64`" ; then
		DTRACEFLAGS=-64
		if test -n "`isalist | grep sparc`"; then
			AC_MSG_RESULT([sparc 64])
			ATOMIC_OBJS="mtev_atomic_sol_sparcv9.lo"
		else
			AC_MSG_RESULT([intel 64])
			ATOMIC_OBJS="mtev_atomic_sol_x86_64.lo"
		fi
	else
		if test -n "`isalist | grep sparc`"; then
			AC_MSG_RESULT([sparc 32])
			ATOMIC_OBJS="mtev_atomic_sol_sparcv8plus.lo"
		else
			AC_MSG_RESULT([intel 32])
			ATOMIC_OBJS="mtev_atomic_sol_x86_32.lo"
		fi
	fi
	fi
	if test "x$GCC" != "xyes" ; then
		CFLAGS="$CFLAGS -mt"
		PICFLAGS="-Kpic"
		MODULELD="$CC -G"
		SHLD="$CC -G"
	else
		if test -n "`echo $CFLAGS | grep m64`" ; then
			DTRACEFLAGS=-64
		fi
		PICFLAGS="-fPIC"
		MODULELD="$CC -shared"
		SHLD="$CC -shared"
		CLINKFLAGS="-shared-libgcc"
	fi
	MODULEEXT=so
	RLDFLAG="-R"
	WHOLE_ARCHIVE="-Wl,-z -Wl,allextract"
	NOWHOLE_ARCHIVE="-Wl,-z -Wl,defaultextract"
	;;
*-*-openbsd*)
	CAP_PLATFORM="openbsd"
	PICFLAGS="-fpic"
	LDFLAGS="$LDFLAGS -Wl,-E"
	MODULELD="$CC -shared"
	SHLD="$CC -shared"
	MODULEEXT=so
	LDFLAGS="$LDFLAGS -L/usr/local/lib"
	CFLAGS="$CFLAGS -I/usr/local/include"
	RLDFLAG="-Wl,--rpath="
	WHOLE_ARCHIVE="-Wl,--whole-archive"
	NOWHOLE_ARCHIVE="-Wl,--no-whole-archive"
	;;
*-*-linux*)
	CAP_PLATFORM="linux"
	LDFLAGS="$LDFLAGS -Wl,-E"
	CPPFLAGS="$CPPFLAGS -D_SVID_SOURCE -D_BSD_SOURCE"
	PICFLAGS="-fpic"
	MODULELD="$CC -shared"
	SHLD="$CC -shared"
	MODULEEXT=so
	RLDFLAG="-Wl,--rpath="
	WHOLE_ARCHIVE="-Wl,--whole-archive"
	NOWHOLE_ARCHIVE="-Wl,--no-whole-archive"
	;;
*-*-freebsd*)
	CAP_PLATFORM="freebsd"
	PICFLAGS="-fpic"
	MODULELD="$CC -shared"
	LDFLAGS="$LDFLAGS -export-dynamic -L/usr/local/lib"
	CFLAGS="$CFLAGS -DCOMPAT_43TTY -I/usr/local/include"
	MODULEEXT=so
	RLDFLAG="-Wl,--rpath="
	;;
*)
	PICFLAGS="-fpic"
	MODULELD="$CC -shared"
	MODULEEXT=so
	RLDFLAG="-Wl,--rpath="
	;;
esac
AC_SUBST(DOTSO)
AC_SUBST(DOTDYLIB)
AC_SUBST(LD_LIBMTEV_VERSION)
AC_SUBST(MDB_MODS)
AC_DEFINE_UNQUOTED(CAP_PLATFORM, "$CAP_PLATFORM", [capabilities platform])
if test "x$CAP_SUPPORTED" = "x1" ; then
	AC_DEFINE(CAP_SUPPORTED)
fi
AC_SUBST(DTRACE)
AC_SUBST(DTRACE_ENABLED)
if test "x$DTRACE_ENABLED" = "x1" ; then
	AC_DEFINE(DTRACE_ENABLED)
fi
AC_SUBST(DTRACEOBJ)
AC_SUBST(DTRACEHDR)
AC_SUBST(DTRACEFLAGS)
AC_SUBST(CLINKFLAGS)
AC_SUBST(SHLD)
AC_SUBST(RLDFLAG)
AC_SUBST(DEPFLAGS)
AC_SUBST(MODULELD)
AC_SUBST(MODULEEXT)
AC_SUBST(WHOLE_ARCHIVE)
AC_SUBST(NOWHOLE_ARCHIVE)
AC_SUBST(ATOMIC_OBJS)
AC_DEFINE_UNQUOTED(MODULEEXT, "$MODULEEXT", [module extension])
AC_MSG_CHECKING([enable build/install of the Java IEP and Jezebel bits])

LUA_MODULE=lua_mtev.$MODULEEXT
if test "$ENABLE_LUA" = "no"; then
  LUA_MODULE=
fi

# Checks for data types
AC_CHECK_SIZEOF(char, 1)
AC_CHECK_SIZEOF(short int, 2)
AC_CHECK_SIZEOF(int, 4)
AC_CHECK_SIZEOF(long int, 4)
AC_CHECK_SIZEOF(long long int, 8)
AC_CHECK_SIZEOF(void *, 1)

AC_CHECK_HEADER(ck_pr.h, [], [AC_MSG_ERROR([*** libck (headers) required ***])])
AC_CHECK_LIB(ck, ck_ht_init, , [AC_MSG_ERROR([*** concurrencyckit (libck) is required ***])])
AC_CHECK_LIB(hwloc, hwloc_topology_init, , [AC_MSG_ERROR([*** libhwloc required ***])])
AC_CHECK_LIB(jlog, jlog_new, , [AC_MSG_ERROR([*** libjlog required github.com/omniti-labs/jlog ***])])
AC_CHECK_LIB(umem, umem_cache_create, , )
AC_CHECK_LIB(z, compress2, , [AC_MSG_ERROR([*** zlib is required ***])])
AC_CHECK_LIB(rt, sem_init, , [
  AC_CHECK_LIB(rt, clock_gettime, , )
])
AC_CHECK_LIB(posix4, sem_wait, , )
AC_CHECK_LIB(pthread, pthread_create, , )

# Check for LuaJIT
OLD_LIBS=$LIBS
LIBS=
if test "x$ENABLE_LUA" != "xno"; then
	if test "x$ENABLE_LUA" = "xLuaJIT"; then
		AC_CHECK_LIB(luajit-5.1, luaL_newstate, [], [AC_MSG_ERROR([*** libluajit-5.1 required ***])])
	elif test "x$ENABLE_LUA" = "xlua52"; then
		AC_MSG_ERROR([*** liblua52 required ***])
	fi

	AC_CHECK_HEADER(udns.h, [], [AC_MSG_ERROR([*** udns.h required ***])])
	AC_CHECK_LIB(udns, dns_new, [], [AC_MSG_ERROR([*** libudns required ***])])
fi
LUALIBS="$LUALIBS $LIBS"
AC_SUBST(LUALIBS)
LIBS=$OLD_LIBS

AC_ARG_ENABLE([zipkin_fq],
    AS_HELP_STRING([--disable-zipkin-fq], [Disable modules zipkin-fq]))

AS_IF([test "x$enable_zipkin_fq" != "xno"], [
	OLD_LIBS=$LIBS
	LIBS=
	AC_CHECK_LIB(fq, fq_client_init, [
		BUILD_MODULES="$BUILD_MODULES zipkin_fq.$MODULEEXT"
	], [AC_MSG_ERROR([*** can't build zipkin-fq, no -lfq ***])])
	LIBS=$OLD_LIBS
])

AC_CHECK_HEADERS(priv.h)
AC_CHECK_FUNCS(setppriv)

AC_CHECK_FUNC(uuid_generate, , [
	AC_MSG_WARN([uuid_generate not available])
	AC_SEARCH_LIBS(uuid_generate, uuid e2fs-uuid, , [AC_MSG_ERROR([*** uuid is required ***])])])

# Some libraries provide an unparse_lower command
# we use that, so if it isn't present, we'll need
# to implement it.
AC_CHECK_FUNC(fdwalk, [AC_DEFINE(HAVE_FDWALK)], )
AC_CHECK_FUNC(uuid_unparse_lower, [AC_DEFINE(HAVE_UUID_UNPARSE_LOWER)], )
AC_CHECK_LIB(util, openpty, , )
AC_CHECK_LIB(termcap, tputs, , )
AC_CHECK_LIB(curses, clear, , [AC_MSG_ERROR([curses not found, but required])])

CPPFLAGS="$CPPFLAGS `pcre-config --cflags`"
LIBS="$LIBS `pcre-config --libs`"
AC_CHECK_LIB(pcre, pcre_compile, ,
	[
		AC_MSG_ERROR([libpcre not found, but required])
	]
)
AC_CHECK_LIB(crypto, ERR_load_CRYPTO_strings, ,
	[
		AC_MSG_ERROR([libcrypto not found, but required])
	]
)
AC_CHECK_LIB(ssl, SSL_library_init, ,
	[
		AC_MSG_ERROR([libssl not found, but required])
	]
)

AC_MSG_CHECKING([libxml2 cflags])
XML2CFLAGS=`xml2-config --cflags`
CFLAGS="$CFLAGS $XML2CFLAGS"
AC_MSG_RESULT([$XML2CFLAGS])

AC_MSG_CHECKING([libxml2 libs])
XML2LIBS=`xml2-config --libs`
LIBS="$LIBS $XML2LIBS"
AC_MSG_RESULT([$XML2LIBS])

AC_CHECK_FUNC(xmlParseDocument, , [AC_MSG_ERROR([*** libxml2 is required ***])])

AC_MSG_CHECKING([libxslt cflags])
XSLTCFLAGS=`xslt-config --cflags`
CFLAGS="$CFLAGS $XSLTCFLAGS"
AC_MSG_RESULT([$XSLTCFLAGS])

AC_MSG_CHECKING([libxslt libs])
XSLTLIBS=`xslt-config --libs`
LIBS="$LIBS $XSLTLIBS"
AC_MSG_RESULT([$XSLTLIBS])

AC_CHECK_FUNC(xsltParseStylesheetDoc, , [AC_MSG_ERROR([*** libxslt is required ***])])

LIBMTEV_LIBS=$LIBS
AC_SUBST(LIBMTEV_LIBS)

AC_CHECK_FUNC(SSLv2_server_method, [ AC_DEFINE(HAVE_SSLV2_SERVER) ])
AC_CHECK_FUNC(SSLv2_client_method, [ AC_DEFINE(HAVE_SSLV2_CLIENT) ])
AC_CHECK_FUNC(SSLv3_server_method, [ AC_DEFINE(HAVE_SSLV3_SERVER) ])
AC_CHECK_FUNC(SSLv3_client_method, [ AC_DEFINE(HAVE_SSLV3_CLIENT) ])
AC_CHECK_FUNC(TLSv1_server_method, [ AC_DEFINE(HAVE_TLSV1_SERVER) ])
AC_CHECK_FUNC(TLSv1_client_method, [ AC_DEFINE(HAVE_TLSV1_CLIENT) ])
AC_CHECK_FUNC(TLSv1_1_server_method, [ AC_DEFINE(HAVE_TLSV1_1_SERVER) ])
AC_CHECK_FUNC(TLSv1_1_client_method, [ AC_DEFINE(HAVE_TLSV1_1_CLIENT) ])
AC_CHECK_FUNC(TLSv1_2_server_method, [ AC_DEFINE(HAVE_TLSV1_2_SERVER) ])
AC_CHECK_FUNC(TLSv1_2_client_method, [ AC_DEFINE(HAVE_TLSV1_2_CLIENT) ])

AC_TRY_LINK([],
	[ issetugid(); ],
	[ ac_cv_libc_defines_issetugid="yes" ],
	[ ac_cv_libc_defines_issetugid="no" ]
)
if test "x$ac_cv_libc_defines_issetugid" = "xyes" ; then
	AC_DEFINE(HAVE_ISSETUGID)
fi

AC_MSG_CHECKING([whether sem_init works])
AC_TRY_RUN(
	[
#include <semaphore.h>
int main(void){sem_t s;return (0 != sem_init(&s,0,0));}
	],
	[
		AC_MSG_RESULT(yes)
		AC_DEFINE(WORKING_SEM_INIT)
	], 
	[
		AC_MSG_RESULT(no)
		AC_MSG_WARN([****** sem_init() is broken, I'll implement one myself.])
	]
)

AC_FUNC_STRFTIME
AC_CHECK_FUNCS(ssetugid strlcpy strnstrn openpty inet_pton inet_ntop getopt \
	poll vasprintf strlcat)

# Checks for header files.
AC_CHECK_HEADERS(sys/file.h sys/types.h dirent.h sys/param.h fcntl.h errno.h limits.h \
	sys/resource.h pthread.h semaphore.h pwd.h stdio.h stdlib.h string.h \
	ctype.h unistd.h time.h pty.h sys/stat.h sys/event.h libkern/OSAtomic.h \
	termio.h termios.h curses.h sys/cdefs.h grp.h netinet/in_systm.h \
	sys/ioctl_compat.h sys/filio.h util.h sys/time.h sys/mman.h \
	sys/ioctl.h stropts.h sys/stream.h alloca.h sys/wait.h bsd/libutil.h libutil.h)

AC_CHECK_HEADERS([term.h], [], [],
	[[
#ifdef HAVE_CURSES_H
# include <curses.h>
#endif
	]])

AC_CHECK_DECLS([openpty], [], [],
	[
#if defined(HAVE_SYS_TYPES_H)
# include <sys/types.h>
#endif
#if defined(HAVE_SYS_IOCTL_H)
# include <sys/ioctl.h>
#endif
#if defined(HAVE_TERMIOS_H)
# include <termios.h>
#endif
#if defined(HAVE_BSD_LIBUTIL_H)
# include <bsd/libutil.h>
#elif defined(HAVE_LIBUTIL_H)
# include <libutil.h>
#endif
#if defined(HAVE_UTIL_H)
# include <util.h>
#endif
#if defined(HAVE_PTY_H)
# include <pty.h>
#endif
	])

AC_CHECK_FUNCS(getpwnam_r)
GETPWNAM_R_POSIX
AC_CHECK_FUNCS(getgrnam_r)
GETGRNAM_R_POSIX

AC_MSG_CHECKING(for tputs() function final argument type)
AC_EGREP_CPP([tputs.*[(][       ]*char[         ]*[)]],
		[#if defined(HAVE_TERM_H)
		 #include <term.h>
		 #endif
		 #if defined(HAVE_CURSES_H)
		 #include <curses.h>
		 #endif],
		[AC_MSG_RESULT(char)
		 AC_DEFINE(TPUTS_TAKES_CHAR)],
		[AC_MSG_RESULT(not char)])

AC_MSG_CHECKING(for tgoto() function final argument type)
AC_EGREP_CPP([tgoto.*[(][       ]*char[         ]*],
		[#if defined(HAVE_TERM_H)
		 #include <term.h>
		 #endif
		 #if defined(HAVE_CURSES_H)
		 #include <curses.h>
		 #endif],
		[AC_MSG_RESULT(char)
		 AC_DEFINE(TGOTO_TAKES_CHAR)],
		[AC_MSG_RESULT(not char)])

AC_CACHE_CHECK([for kqueue support], ac_cv_have_kqueue, [
	AC_TRY_LINK(
		[ #include <sys/types.h> ],
		[ u_int a; a = kqueue(); ],
		[ ac_cv_have_kqueue="yes" ],
		[ ac_cv_have_kqueue="no" ]
	)
])
if test "x$ac_cv_have_kqueue" = "xyes" ; then
	AC_DEFINE(HAVE_KQUEUE)
	EVENTER_OBJS="$EVENTER_OBJS eventer_kqueue_impl.lo"
	AC_DEFINE_UNQUOTED(DEFAULT_EVENTER, "kqueue")
	have_kqueue=1
fi

AC_CACHE_CHECK([for epoll support], ac_cv_have_epoll, [
	AC_TRY_LINK(
		[ #include <sys/types.h> ],
		[ int a; a = epoll_create(); ],
		[ ac_cv_have_epoll="yes" ],
		[ ac_cv_have_epoll="no" ]
	)
])
AC_CHECK_HEADERS(sys/eventfd.h)
if test "x$ac_cv_have_epoll" = "xyes" ; then
	AC_DEFINE(HAVE_EPOLL)
	EVENTER_OBJS="$EVENTER_OBJS eventer_epoll_impl.lo"
	AC_DEFINE_UNQUOTED(DEFAULT_EVENTER, "epoll")
	have_epoll=1
fi

AC_CACHE_CHECK([for Solaris ports support], ac_cv_have_ports, [
	AC_TRY_LINK(
		[ #include <port.h> ],
		[ u_int a; a = port_create(); ],
		[ ac_cv_have_ports="yes" ],
		[ ac_cv_have_ports="no" ]
	)
])
if test "x$ac_cv_have_ports" = "xyes" ; then
	AC_DEFINE(HAVE_PORTS)
	EVENTER_OBJS="$EVENTER_OBJS eventer_ports_impl.lo"
	AC_DEFINE_UNQUOTED(DEFAULT_EVENTER, "ports")
	have_ports=1
fi

AC_SUBST(EVENTER_OBJS)

AC_CACHE_CHECK([for posix_readdir_r], ac_cv_have_posix_readdir_r, [
	AC_TRY_COMPILE(
		[ #include <dirent.h> ], 
		[ struct dirent *dep, de; readdir_r("/", &de, &dep); ], 
		[ ac_cv_have_posix_readdir_r="yes" ],
		[ ac_cv_have_posix_readdir_r="no" ]
	)
])
if test "x$ac_cv_have_posix_readdir_r" = "xyes" ; then
	AC_DEFINE(HAVE_POSIX_READDIR_R)
	have_posix_readdir_r=1
fi

AC_CACHE_CHECK([for sig_t type], ac_cv_have_sig_t, [
	AC_TRY_COMPILE(
		[ #include <signal.h> ], 
		[ sig_t a; (void)a;], 
		[ ac_cv_have_sig_t="yes" ],
		[ ac_cv_have_sig_t="no" ]
	)
])
if test "x$ac_cv_have_sig_t" = "xyes" ; then
	AC_DEFINE(HAVE_SIG_T)
	have_sig_t=1
fi

AC_CACHE_CHECK([for htobe64], ac_cv_have_htobe64, [
	AC_TRY_LINK(
		[ #include <endian.h> ],
		[ long long int a; a = htobe64(1);],
		[ ac_cv_have_htobe64="yes" ],
		[ ac_cv_have_htobe64="no" ]
	)
])
AC_CACHE_CHECK([for htonll], ac_cv_have_htonll, [
	AC_TRY_LINK(
		[ #include <endian.h> ],
		[ long long int a; a = htonll(1);],
		[ ac_cv_have_htonll="yes" ],
		[ ac_cv_have_htonll="no" ]
	)
])

if test "x$ac_cv_have_htonll" = "xno" -a "x$ac_cv_have_htobe64" = "xyes" ; then
	AC_DEFINE(MAKE_HTOBE64_HTONLL)
fi

AC_CACHE_CHECK([for u_int type], ac_cv_have_u_int, [
	AC_TRY_COMPILE(
		[ #include <sys/types.h> ], 
		[ u_int a; a = 1;], 
		[ ac_cv_have_u_int="yes" ],
		[ ac_cv_have_u_int="no" ]
	)
])
if test "x$ac_cv_have_u_int" = "xyes" ; then
	AC_DEFINE(HAVE_U_INT)
	have_u_int=1
fi

AC_CACHE_CHECK([for intXX_t types], ac_cv_have_intxx_t, [
	AC_TRY_COMPILE(
		[ #include <sys/types.h> ], 
		[ int8_t a; int16_t b; int32_t c; a = b = c = 1;], 
		[ ac_cv_have_intxx_t="yes" ],
		[ ac_cv_have_intxx_t="no" ]
	)
])
if test "x$ac_cv_have_intxx_t" = "xyes" ; then
	AC_DEFINE(HAVE_INTXX_T)
	have_intxx_t=1
fi
	
AC_CACHE_CHECK([for int64_t type], ac_cv_have_int64_t, [
	AC_TRY_COMPILE(
		[ #include <sys/types.h> ], 
		[ int64_t a; a = 1;], 
		[ ac_cv_have_int64_t="yes" ],
		[ ac_cv_have_int64_t="no" ]
	)
])
if test "x$ac_cv_have_int64_t" = "xyes" ; then
	AC_DEFINE(HAVE_INT64_T)
	have_int64_t=1
fi
	
AC_CACHE_CHECK([for u_intXX_t types], ac_cv_have_u_intxx_t, [
	AC_TRY_COMPILE(
		[ #include <sys/types.h> ], 
		[ u_int8_t a; u_int16_t b; u_int32_t c; a = b = c = 1;], 
		[ ac_cv_have_u_intxx_t="yes" ],
		[ ac_cv_have_u_intxx_t="no" ]
	)
])
if test "x$ac_cv_have_u_intxx_t" = "xyes" ; then
	AC_DEFINE(HAVE_U_INTXX_T)
	have_u_intxx_t=1
fi

AC_CACHE_CHECK([for u_int64_t types], ac_cv_have_u_int64_t, [
	AC_TRY_COMPILE(
		[ #include <sys/types.h> ], 
		[ u_int64_t a; a = 1;], 
		[ ac_cv_have_u_int64_t="yes" ],
		[ ac_cv_have_u_int64_t="no" ]
	)
])
if test "x$ac_cv_have_u_int64_t" = "xyes" ; then
	AC_DEFINE(HAVE_U_INT64_T)
	have_u_int64_t=1
fi

if (test -z "$have_u_intxx_t" || test -z "$have_intxx_t" && \
	test "x$ac_cv_header_sys_bitypes_h" = "xyes")
then
	AC_MSG_CHECKING([for intXX_t and u_intXX_t types in sys/bitypes.h])
	AC_TRY_COMPILE(
		[
#include <sys/bitypes.h>
		], 
		[
			int8_t a; int16_t b; int32_t c;
			u_int8_t e; u_int16_t f; u_int32_t g;
			a = b = c = e = f = g = 1;
		], 
		[
			AC_DEFINE(HAVE_U_INTXX_T)
			AC_DEFINE(HAVE_INTXX_T)
			AC_MSG_RESULT(yes)
		],
		[AC_MSG_RESULT(no)]
	) 
fi

if test -z "$have_u_intxx_t" ; then
	AC_CACHE_CHECK([for uintXX_t types], ac_cv_have_uintxx_t, [
		AC_TRY_COMPILE(
			[
#include <sys/types.h>
			], 
			[ uint8_t a; uint16_t b; uint32_t c; a = b = c = 1; ], 
			[ ac_cv_have_uintxx_t="yes" ],
			[ ac_cv_have_uintxx_t="no" ]
		)
	])
	if test "x$ac_cv_have_uintxx_t" = "xyes" ; then
		AC_DEFINE(HAVE_UINTXX_T)
	fi
fi

AC_CACHE_CHECK([for socklen_t], ac_cv_have_socklen_t, [
	AC_TRY_COMPILE(
		[
#include <sys/types.h>
#include <sys/socket.h>
		],
		[socklen_t foo; foo = 1235;],
		[ ac_cv_have_socklen_t="yes" ],
		[ ac_cv_have_socklen_t="no" ]
	)
])
if test "x$ac_cv_have_socklen_t" = "xyes" ; then
	AC_DEFINE(HAVE_SOCKLEN_T)
fi

AC_CACHE_CHECK([for size_t], ac_cv_have_size_t, [
	AC_TRY_COMPILE(
		[
#include <sys/types.h>
		],
		[ size_t foo; foo = 1235; ],
		[ ac_cv_have_size_t="yes" ],
		[ ac_cv_have_size_t="no" ]
	)
])
if test "x$ac_cv_have_size_t" = "xyes" ; then
	AC_DEFINE(HAVE_SIZE_T)
fi

AC_CACHE_CHECK([for ssize_t], ac_cv_have_ssize_t, [
	AC_TRY_COMPILE(
		[
#include <sys/types.h>
		],
		[ ssize_t foo; foo = 1235; ],
		[ ac_cv_have_ssize_t="yes" ],
		[ ac_cv_have_ssize_t="no" ]
	)
])
if test "x$ac_cv_have_ssize_t" = "xyes" ; then
	AC_DEFINE(HAVE_SSIZE_T)
fi

BUILD_MODULES="$BUILD_MODULES $LUA_MODULE"
AC_SUBST(BUILD_MODULES)

docdir="docs"
mansubdir="man"
AC_SUBST(docdir)
AC_SUBST(mansubdir)
SHCFLAGS="$PICFLAGS $CFLAGS"
AC_SUBST(SHCFLAGS)
AC_SUBST(LD)
AC_SUBST(SHLDFLAGS)

SUBPREFIX="$prefix"
if test "x$prefix" = "xNONE"; then
	SUBPREFIX="$ac_default_prefix"
fi
AC_MSG_CHECKING([Resolving libexec path...])
fullpath=$libexecdir
while test "x$temppath" != "x$fullpath" ; do
	temppath=$fullpath
	fullpath=`eval echo ${fullpath}`
done
fullpath=`echo $fullpath | sed "s~NONE~$SUBPREFIX~"`
AC_MSG_RESULT([$fullpath/mtev])
AC_DEFINE_UNQUOTED(MTEV_MODULES_DIR, "${fullpath}/mtev")
MODULES_DIR=${fullpath}/mtev
AC_SUBST(MODULES_DIR)

AC_MSG_CHECKING([Resolving lib path...])
fullpath=$libdir
while test "x$temppath" != "x$fullpath" ; do
	temppath=$fullpath
	fullpath=`eval echo ${fullpath}`
done
fullpath=`echo $fullpath | sed "s~NONE~$SUBPREFIX~"`
AC_MSG_RESULT([$fullpath])
AC_DEFINE_UNQUOTED(MTEV_LIB_DIR, "${fullpath}")
LIB_DIR=${fullpath}

AC_MSG_CHECKING([Resolving sysconfdir path...])
fullpath=$sysconfdir
while test "x$temppath" != "x$fullpath" ; do
	temppath=$fullpath
	fullpath=`eval echo ${fullpath}`
done
fullpath=`echo $fullpath | sed "s~NONE~$SUBPREFIX~"`
AC_MSG_RESULT([$fullpath])
AC_DEFINE_UNQUOTED(MTEV_ETC_DIR, "${fullpath}")
ETC_DIR=${fullpath}
AC_SUBST(ETC_DIR)

if test -n "`$CC -V 2>&1 | grep 'Sun C'`"; then
	if test "$enable_string" != "no"; then
		CFLAGS="$CFLAGS -errwarn=%all"
	fi
else
	CFLAGS="$CFLAGS -Wall"
	if test "$enable_strict" != "no"; then
		CFLAGS="$CFLAGS -Werror"
	fi
fi

LUACFLAGS=`echo $CFLAGS | sed -e "s#${C99FLAG}##g; s#-mt##g; s#-errwarn=%all##g;"`
AC_SUBST(LUACFLAGS)

UNAME_V=`uname -v`
UNAME_R=`uname -r`
UNAME_S=`uname -s`
UNAME_M=`uname -m`
UNAME_N=`uname -n`
UNAME_P=`uname -p`
AC_DEFINE_UNQUOTED(UNAME_V, "$UNAME_V")
AC_DEFINE_UNQUOTED(UNAME_R, "$UNAME_R")
AC_DEFINE_UNQUOTED(UNAME_S, "$UNAME_S")
AC_DEFINE_UNQUOTED(UNAME_M, "$UNAME_M")
AC_DEFINE_UNQUOTED(UNAME_N, "$UNAME_N")
AC_DEFINE_UNQUOTED(UNAME_P, "$UNAME_P")


AC_OUTPUT([
Makefile
src/Makefile
src/eventer/Makefile
src/json-lib/Makefile
src/man/Makefile
src/modules/Makefile
src/utils/Makefile
src/noitedit/Makefile
src/examples/Makefile
src/scripts/mtev-config
test/Makefile
])
